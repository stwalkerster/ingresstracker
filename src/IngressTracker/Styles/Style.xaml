<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:fluent="urn:fluent-ribbon"
                    xmlns:cal="http://www.caliburnproject.org"
                    xmlns:converters="clr-namespace:IngressTracker.Converters"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Style TargetType="fluent:StatusBar">
        <Setter Property="Foreground" Value="White" />
    </Style>

    <converters:InverseBooleanConverter x:Key="InverseBooleanConverter" />
    
    <Color x:Key="{x:Static fluent:MetroColors.ThemeColorKey}">#2E2E2E</Color>

    <Style x:Key="WindowTabControlStyle" TargetType="TabControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding DisplayName}" Padding="0,2,5,0" />
                        <Button Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Width="20" Height="20" cal:Message.Attach="CloseWindow($dataContext)" Margin="0,0,-7,0">
                            <Path Data="M 1,0 0,0 0,1 2.75,3.75 0,6.5 l 0,1 1,0 2.75,-2.75 2.75,2.75 1,0 0,-1 L 4.75,3.75 7.5,1 7.5,0 6.5,0 3.75,2.75 z" Fill="Black"/>
                        </Button>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="TabItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Border Name="TabBorder" BorderThickness="1,1,1,0" BorderBrush="Silver" CornerRadius="4,4,0,0" Margin="1,0">
                                    <ContentPresenter x:Name="ContentSite"
                                                              VerticalAlignment="Center"
                                                              HorizontalAlignment="Center"
                                                              ContentSource="Header"
                                                              Margin="10,2"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="TabBorder" Property="Background" Value="White" />
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="False">
                                        <Setter TargetName="TabBorder" Property="Background" Value="Gainsboro" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Background" Value="#FFDDDDDD" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold"></Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataScreenDataGridStyle" TargetType="DataGrid">
        <Setter Property="ItemsSource" Value="{Binding DataItems}" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="RowHeaderWidth" Value="30" />
        <Setter Property="SelectedItem" Value="{Binding SelectedItem}" />
    </Style>

    <Style TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self},
                     Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StaticDataScreenDataGridStyle" TargetType="DataGrid" BasedOn="{StaticResource DataScreenDataGridStyle}">
        <Setter Property="IsReadOnly" Value="{Binding UserAllowedEdit, Converter={StaticResource InverseBooleanConverter}}" />
    </Style>

    <SolidColorBrush x:Key="EnlightenedBrush" Color="#FF239821"/>
    <SolidColorBrush x:Key="ResistanceBrush" Color="#FF0078b5"/>
    
    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="Red" />
        <Setter Property="Height" Value="10" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding LoginService.Agent.Faction.Code}" Value="ENL">
                <Setter Property="Foreground" Value="{StaticResource EnlightenedBrush}"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding LoginService.Agent.Faction.Code}" Value="RES">
                <Setter Property="Foreground" Value="{StaticResource ResistanceBrush}"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="HeaderTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="0,10,0,5" />
    </Style>
    <Style x:Key="FormButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="100" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Margin" Value="0,5" />
    </Style>
    
    <Style TargetType="TextBox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},
                        Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="Red"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="AnimatedExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2"/>
                <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                <Path x:Name="Arrow"
                      Grid.Column="0"
                      Data="M 1,1.5 L 4.5,5 8,1.5"
                      Stroke="#FF666666"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0"/>
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                                 Value="true">
                <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
                <Setter Property="Stroke"
                                    Value="#222"
                                    TargetName="Arrow"/>
            </Trigger>
            <Trigger Property="IsPressed"
                                 Value="true">
                <Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
                <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
                <Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Arrow"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <converters:MultiplyConverter x:Key="MultiplyConverter" />
    <ControlTemplate x:Key="RevealExpanderTemp" TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
            </ToggleButton>
            <ScrollViewer x:Name="ExpanderContentScrollView" DockPanel.Dock="Bottom"
                              HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"
                              HorizontalContentAlignment="Stretch"
                              VerticalContentAlignment="Bottom"
                              >
                <ScrollViewer.Tag>
                    <system:Double>0.0</system:Double>
                </ScrollViewer.Tag>
                <ScrollViewer.Height>
                    <MultiBinding Converter="{StaticResource MultiplyConverter}">
                        <Binding Path="ActualHeight" ElementName="ExpanderContent"/>
                        <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                    </MultiBinding>
                </ScrollViewer.Height>
                <ContentPresenter x:Name="ExpanderContent" ContentSource="Content"/>
            </ScrollViewer>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="1"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style TargetType="Expander">
        <Setter Property="Template" Value="{StaticResource RevealExpanderTemp}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
    </Style>
</ResourceDictionary>